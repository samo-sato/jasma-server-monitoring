import { NavLink } from 'react-router-dom'
import { generateHelp, generateSnoozeUrl } from '../../../functions'

function List(props) {

  // handle copy to clipboard
  function handleClick(e) {
    navigator.clipboard.writeText(e.target.title)
      .then(() => {
      /* clipboard successfully set */

      }, () => {
      /* clipboard write failed */

      })
  }

  // returns information about last state of given watchdog
  function generateLastKnownStatus(watchdog) {
    if (watchdog.last_log_at) { // if last log available
      let date = (Date.now() - watchdog.last_log_at) / 1000 / 60 // time from last log until now (in minutes)
      let minutesAgo = Math.round(date) // rounding to whole minutes

      // some default values used in conditioning tree bellow
      let timeAgo = minutesAgo
      let units = 'minutes'
      let minutesInMonth = 30 * 24 * 60
      let minutesInDay = 24 * 60
      let minutesInHour = 60

      // determining what time format will be shown to user
      if (minutesAgo >= minutesInMonth) { // it is at least whole month since last log, so show time in months
        timeAgo = Math.round((minutesAgo / minutesInMonth) * 10) / 10
        units = 'month(s)'
      } else if(minutesAgo >= minutesInDay) { // it is at least whole day since last log, so show time in days
        timeAgo = Math.round((minutesAgo / minutesInDay) * 10) / 10
        units = 'day(s)'
      } else if (minutesAgo >= minutesInHour) { // it is at least whole hour since last log, so show time in hours
        timeAgo = Math.round((minutesAgo / minutesInHour) * 10) / 10
        units = 'hour(s)'
      }

      let lastState = watchdog.last_status ? 'ON-LINE' : 'OFF-LINE' // status description of last log for user
      return `${lastState} â‰ˆ ${timeAgo} ${units} ago` // final string to be shown to user
    } else {
      return 'Not available (no logs)'
    }
  }

  // get appropriate css class name based on Watchdog last connectivity status and enabled/disabled status
  function getClassName(lastStatus, enabled) {
    if (enabled) {
      return lastStatus === 1 ? 'good' : 'bad'
    } else {
      return ''
    }
  }

  // teble body to render
  const tableBody = props.watchdogs.map((watchdog) => {
    return (
      <tr key={watchdog.id}>
        <td>{watchdog.id}</td>
        <td>{watchdog.name}</td>
        <td className={getClassName(watchdog.last_status, watchdog.enabled)}>{generateLastKnownStatus(watchdog)}</td>
        <td>
          <button
            title={watchdog.url || generateSnoozeUrl(watchdog.private_id)}
            onClick={handleClick}
            style={{cursor:'copy'}}
          >
          Copy URL
          </button>
        </td>
        <td>{watchdog.passive ? 'Passive' : 'Active'}</td>
        <td>{watchdog.enabled ? 'Yes' : 'No'}</td>
        <td>
          <NavLink to={String(watchdog.id)} >Edit</NavLink>
        </td>
      </tr>
    )
  })

  return (
    <div>
      <table border="0">
        <thead>
          <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Last known service status</th>
            <th>Endpoint{generateHelp('Active mode:\nThis URL is provided by the user. It is URL that will be monitored by Watchdog at specified intervals. It represents the endpoint that Watchdog will request to check the service\'s status.\n\nPassive mode:\nThis URL is generated by the app. This URL must be requested by external service at specified time intervals to consider the service as "online" by the Watchdog.')}</th>
            <th>Operating mode</th>
            <th>Is enabled?</th>
            <th>Edit</th>
          </tr>
        </thead>
        <tbody>
          {tableBody}
        </tbody>
        <tfoot>
          <tr>
            <td colSpan="7">End of the list</td>
          </tr>
        </tfoot>
      </table>
    </div>
  )
}

export default List
